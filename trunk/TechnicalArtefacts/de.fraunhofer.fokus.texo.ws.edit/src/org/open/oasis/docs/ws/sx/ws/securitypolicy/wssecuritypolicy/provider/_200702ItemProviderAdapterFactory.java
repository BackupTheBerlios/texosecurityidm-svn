/**
* This file is part of WSSecurityPolicyEditor.
* Copyright (c) 2011 Fraunhofer FOKUS. All Rights Reserved
* Authors: Tom Sattler
* 
* WSSecurityPolicyEditor is free software: you can redistribute it and/or modify
* it under the terms of the GNU Affero General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* any later version.
*
* WSSecurityPolicyEditor is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU Affero General Public License for more details.
* 
* You should have received a copy of the GNU Affero General Public License
* along with WSSecurityPolicyEditor.  If not, see <http://www.gnu.org/licenses/>.
* 
* For more information, please contact Fraunhofer FOKUS at this
* address: elankontakt [at] fokus [dot] fraunhofer [dot] de
* http://www.fokus.fraunhofer.de
*/
package org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.util._200702AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class _200702ItemProviderAdapterFactory extends _200702AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public _200702ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.EmptyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyTypeItemProvider emptyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.EmptyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyTypeAdapter() {
		if (emptyTypeItemProvider == null) {
			emptyTypeItemProvider = new EmptyTypeItemProvider(this);
		}

		return emptyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.HeaderType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HeaderTypeItemProvider headerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.HeaderType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHeaderTypeAdapter() {
		if (headerTypeItemProvider == null) {
			headerTypeItemProvider = new HeaderTypeItemProvider(this);
		}

		return headerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.IssuedTokenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IssuedTokenTypeItemProvider issuedTokenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.IssuedTokenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIssuedTokenTypeAdapter() {
		if (issuedTokenTypeItemProvider == null) {
			issuedTokenTypeItemProvider = new IssuedTokenTypeItemProvider(this);
		}

		return issuedTokenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.KeyValueTokenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueTokenTypeItemProvider keyValueTokenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.KeyValueTokenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueTokenTypeAdapter() {
		if (keyValueTokenTypeItemProvider == null) {
			keyValueTokenTypeItemProvider = new KeyValueTokenTypeItemProvider(this);
		}

		return keyValueTokenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.NestedPolicyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NestedPolicyTypeItemProvider nestedPolicyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.NestedPolicyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNestedPolicyTypeAdapter() {
		if (nestedPolicyTypeItemProvider == null) {
			nestedPolicyTypeItemProvider = new NestedPolicyTypeItemProvider(this);
		}

		return nestedPolicyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.QNameAssertionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QNameAssertionTypeItemProvider qNameAssertionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.QNameAssertionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQNameAssertionTypeAdapter() {
		if (qNameAssertionTypeItemProvider == null) {
			qNameAssertionTypeItemProvider = new QNameAssertionTypeItemProvider(this);
		}

		return qNameAssertionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.RequestSecurityTokenTemplateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestSecurityTokenTemplateTypeItemProvider requestSecurityTokenTemplateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.RequestSecurityTokenTemplateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestSecurityTokenTemplateTypeAdapter() {
		if (requestSecurityTokenTemplateTypeItemProvider == null) {
			requestSecurityTokenTemplateTypeItemProvider = new RequestSecurityTokenTemplateTypeItemProvider(this);
		}

		return requestSecurityTokenTemplateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SecureConversationTokenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecureConversationTokenTypeItemProvider secureConversationTokenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SecureConversationTokenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecureConversationTokenTypeAdapter() {
		if (secureConversationTokenTypeItemProvider == null) {
			secureConversationTokenTypeItemProvider = new SecureConversationTokenTypeItemProvider(this);
		}

		return secureConversationTokenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SePartsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SePartsTypeItemProvider sePartsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SePartsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSePartsTypeAdapter() {
		if (sePartsTypeItemProvider == null) {
			sePartsTypeItemProvider = new SePartsTypeItemProvider(this);
		}

		return sePartsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SerElementsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SerElementsTypeItemProvider serElementsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SerElementsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSerElementsTypeAdapter() {
		if (serElementsTypeItemProvider == null) {
			serElementsTypeItemProvider = new SerElementsTypeItemProvider(this);
		}

		return serElementsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SpnegoContextTokenType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpnegoContextTokenTypeItemProvider spnegoContextTokenTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.SpnegoContextTokenType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpnegoContextTokenTypeAdapter() {
		if (spnegoContextTokenTypeItemProvider == null) {
			spnegoContextTokenTypeItemProvider = new SpnegoContextTokenTypeItemProvider(this);
		}

		return spnegoContextTokenTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.TokenAssertionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenAssertionTypeItemProvider tokenAssertionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.open.oasis.docs.ws.sx.ws.securitypolicy.wssecuritypolicy.TokenAssertionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAssertionTypeAdapter() {
		if (tokenAssertionTypeItemProvider == null) {
			tokenAssertionTypeItemProvider = new TokenAssertionTypeItemProvider(this);
		}

		return tokenAssertionTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (emptyTypeItemProvider != null) emptyTypeItemProvider.dispose();
		if (headerTypeItemProvider != null) headerTypeItemProvider.dispose();
		if (issuedTokenTypeItemProvider != null) issuedTokenTypeItemProvider.dispose();
		if (keyValueTokenTypeItemProvider != null) keyValueTokenTypeItemProvider.dispose();
		if (nestedPolicyTypeItemProvider != null) nestedPolicyTypeItemProvider.dispose();
		if (qNameAssertionTypeItemProvider != null) qNameAssertionTypeItemProvider.dispose();
		if (requestSecurityTokenTemplateTypeItemProvider != null) requestSecurityTokenTemplateTypeItemProvider.dispose();
		if (secureConversationTokenTypeItemProvider != null) secureConversationTokenTypeItemProvider.dispose();
		if (sePartsTypeItemProvider != null) sePartsTypeItemProvider.dispose();
		if (serElementsTypeItemProvider != null) serElementsTypeItemProvider.dispose();
		if (spnegoContextTokenTypeItemProvider != null) spnegoContextTokenTypeItemProvider.dispose();
		if (tokenAssertionTypeItemProvider != null) tokenAssertionTypeItemProvider.dispose();
	}

}
